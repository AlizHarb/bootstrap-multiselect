/*!
 * Bootstrap Multiselect (Azh Select)
 * Minified JS Build
 * ----------------------------------
 * A lightweight, Bootstrap-styled multiselect dropdown.
 * Features:
 *  - Searchable options
 *  - Tagging / Creatable options
 *  - Clear button
 *  - Remote data loading
 *  - Multiple and single select modes
 *  - Theming (light/dark, Bootstrap v5)
 *
 * Author: Ali Harb
 * Repository: https://github.com/alizharb/bootstrap-multiselect
 * License: MIT
 * Version: 1.0.3
 */
class AzhSelect {
  constructor(e, t = {}) {
    (this.el = e),
      (this.options = this._mergeOptions(t)),
      (this.isMultiple = this.el.multiple),
      (this.isOpen = !1),
      (this.selected = []),
      (this.filteredOptions = []),
      (this._remoteTimer = null),
      this._build(),
      this._bindEvents(),
      this._render(),
      this._applyTheme();
  }
  _mergeOptions(e) {
    const t = this.el.dataset;
    return Object.assign(
      {
        search: "true" === t.search,
        clear: "true" === t.clear,
        tags: "true" === t.tags,
        virtual: "true" === t.virtual,
        placeholder: t.placeholder || "Select...",
        max: t.max ? parseInt(t.max, 10) : null,
        remote: "true" === t.remote,
        endpoint: t.endpoint || null,
        minQuery: t.minQuery ? parseInt(t.minQuery, 10) : 1,
        delay: t.delay ? parseInt(t.delay, 10) : 300,
        templateOption: (e) => e.label,
        templateValue: (e) => e.label,
        i18n: Object.assign(
          {
            placeholder: "Select...",
            clear: "Clear",
            noResults: "No results found",
          },
          e.i18n || {}
        ),
      },
      e
    );
  }
  _build() {
    (this.el.style.display = "none"),
      (this.wrapper = document.createElement("div")),
      (this.wrapper.className = "azh-select-wrapper"),
      (this.display = document.createElement("div")),
      (this.display.className = "azh-select-display"),
      (this.display.tabIndex = 0),
      (this.display.innerHTML = `<span class="azh-placeholder">${this.options.i18n.placeholder}</span>`),
      (this.dropdown = document.createElement("div")),
      (this.dropdown.className = "azh-select-dropdown"),
      this.options.search &&
        ((this.searchInput = document.createElement("input")),
        (this.searchInput.type = "text"),
        (this.searchInput.className = "azh-select-search form-control"),
        (this.searchInput.placeholder = "Search..."),
        this.dropdown.appendChild(this.searchInput)),
      (this.list = document.createElement("div")),
      (this.list.className = "azh-select-options"),
      this.dropdown.appendChild(this.list),
      this.options.clear &&
        ((this.clearBtn = document.createElement("button")),
        (this.clearBtn.type = "button"),
        (this.clearBtn.className = "azh-clear btn btn-sm btn-link"),
        (this.clearBtn.innerText = this.options.i18n.clear),
        this.dropdown.appendChild(this.clearBtn)),
      this.wrapper.appendChild(this.display),
      this.wrapper.appendChild(this.dropdown),
      this.el.parentNode.insertBefore(this.wrapper, this.el.nextSibling),
      this._parseOptions(),
      this.options.remote &&
        "true" === this.el.dataset.preload &&
        this._fetchRemote("");
  }
  _applyTheme() {
    const e =
      this.el.dataset.bsTheme ||
      document.documentElement.dataset.bsTheme ||
      document.body.dataset.bsTheme ||
      "light";
    this.wrapper.setAttribute("data-bs-theme", e);
  }
  _parseOptions() {
    (this.optionsData = Array.from(this.el.options).map((e, t) => ({
      value: e.value,
      label: e.text,
      selected: e.selected,
      disabled: e.disabled,
      index: t,
    }))),
      (this.filteredOptions = [...this.optionsData]);
  }
  _render() {
    (this.list.innerHTML = ""),
      0 === this.filteredOptions.length
        ? (this.list.innerHTML = `<div class="azh-no-results">${this.options.i18n.noResults}</div>`)
        : this.filteredOptions.forEach((e) => {
            const t = document.createElement("div");
            (t.className = "azh-option"),
              e.disabled && t.classList.add("disabled"),
              e.selected && t.classList.add("selected"),
              (t.dataset.value = e.value),
              (t.innerHTML = this.options.templateOption(e)),
              this.list.appendChild(t);
          }),
      this._updateDisplay(),
      this._trigger("afterRender");
  }
  _updateDisplay() {
    const e = this.optionsData.filter((e) => e.selected);
    if (0 === e.length)
      this.display.innerHTML = `<span class="azh-placeholder">${this.options.i18n.placeholder}</span>`;
    else if (this.isMultiple)
      this.display.innerHTML = e
        .map((e) => this.options.templateValue(e))
        .join(" ");
    else this.display.innerHTML = this.options.templateValue(e[0]);
  }
  _bindEvents() {
    this.display.addEventListener("click", () => this.toggle()),
      this.searchInput &&
        this.searchInput.addEventListener("input", (e) => {
          const t = e.target.value.toLowerCase();
          if (this.options.remote && t.length >= this.options.minQuery)
            return (
              clearTimeout(this._remoteTimer),
              void (this._remoteTimer = setTimeout(
                () => this._fetchRemote(t),
                this.options.delay
              ))
            );
          (this.filteredOptions = this.optionsData.filter((e) =>
            e.label.toLowerCase().includes(t)
          )),
            this.options.tags &&
              t &&
              !this._hasOption(t) &&
              this.filteredOptions.push({
                value: t,
                label: `âž• Add "${t}"`,
                selected: !1,
                creatable: !0,
              }),
            this._render();
        }),
      this.clearBtn &&
        this.clearBtn.addEventListener("click", () => {
          this.clear(), this._trigger("clear");
        }),
      this.list.addEventListener("click", (e) => {
        const t = e.target.closest(".azh-option");
        if (!t || t.classList.contains("disabled")) return;
        const n = t.dataset.value,
          o = this.filteredOptions.find((e) => e.value === n);
        o && o.creatable ? this._createTag(n) : this._select(n);
      }),
      document.addEventListener("click", (e) => {
        this.wrapper.contains(e.target) || this.close();
      });
  }
  _select(e) {
    const t = this.optionsData.find((t) => t.value === e);
    if (!t) return;
    this.isMultiple
      ? (t.selected = !t.selected)
      : (this.optionsData.forEach((e) => (e.selected = !1)),
        (t.selected = !0),
        this.close()),
      this.el.querySelectorAll("option").forEach((e) => {
        e.selected = this.optionsData.find((t) => t.value === e.value).selected;
      }),
      this._render(),
      this._trigger("change");
  }
  _createTag(e) {
    const t = document.createElement("option");
    (t.value = e),
      (t.textContent = e),
      (t.selected = !0),
      this.el.appendChild(t),
      this._parseOptions(),
      this._render(),
      this._trigger("optionCreated", { value: e });
  }
  _hasOption(e) {
    return this.optionsData.some(
      (t) => t.value.toLowerCase() === e.toLowerCase()
    );
  }
  _fetchRemote(e = "") {
    if (!this.options.endpoint) return;
    let t = this.options.endpoint;
    e && (t += t.includes("?") ? "&" : "?") + "q=" + encodeURIComponent(e),
      fetch(t)
        .then((e) => e.json())
        .then((t) => {
          if (!Array.isArray(t)) return;
          const n = this.el.dataset.valueField || "id",
            o = this.el.dataset.labelField || "name";
          (this.el.innerHTML = ""),
            t.forEach((t) => {
              const r = t[n] ?? t.id,
                i = t[o] ?? t.name ?? t.title ?? String(r),
                a = document.createElement("option");
              (a.value = r), (a.textContent = i), this.el.appendChild(a);
            }),
            this._parseOptions(),
            e
              ? (this.filteredOptions = this.optionsData.filter((t) =>
                  t.label.toLowerCase().includes(e.toLowerCase())
                ))
              : (this.filteredOptions = [...this.optionsData]),
            this._render(),
            this._trigger("remoteLoaded", {
              query: e,
              options: this.optionsData,
            });
        })
        .catch((e) => this._trigger("error", { error: e }));
  }
  clear() {
    this.optionsData.forEach((e) => (e.selected = !1)),
      this.el.querySelectorAll("option").forEach((e) => (e.selected = !1)),
      this._render();
  }
  toggle() {
    this.isOpen ? this.close() : this.open();
  }
  open() {
    this.dropdown.classList.add("open"),
      (this.isOpen = !0),
      this._trigger("open");
  }
  close() {
    this.dropdown.classList.remove("open"),
      (this.isOpen = !1),
      this._trigger("close");
  }
  destroy() {
    this.wrapper.remove(),
      (this.el.style.display = ""),
      this._trigger("destroy");
  }
  _trigger(e, t = {}) {
    const n = new CustomEvent(`azh:${e}`, {
      detail: Object.assign({ instance: this }, t),
    });
    this.el.dispatchEvent(n);
  }
}
const azhSelect = {
  instances: [],
  init(e, t = {}) {
    document.querySelectorAll(e).forEach((e) => {
      if (!e.classList.contains("azh-select")) return;
      const n = new AzhSelect(e, t);
      this.instances.push(n);
    });
  },
  get(e) {
    return this.instances.find((t) => t.el.matches(e));
  },
  destroy(e) {
    const t = this.get(e);
    t &&
      (t.destroy(), (this.instances = this.instances.filter((e) => e !== t)));
  },
  destroyAll() {
    this.instances.forEach((e) => e.destroy()), (this.instances = []);
  },
};
window.azhSelect = azhSelect;
